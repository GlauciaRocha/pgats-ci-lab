# CI de Nível 04 - Disparo dos testes dentro do pipe de dev
name: 'Execução Integrada' # Nome do workflow, visível na aba Actions do GitHub

# Gatilhos: Quando o workflow deve ser executado
on:
  workflow_dispatch: # Permite que este workflow seja disparado manualmente pela interface do GitHub

# Trabalhos/tarefas (Jobs) que compõem o workflow
jobs:
  # Job de inspeção de código (linting)
  inspecao: # Nome do job
    runs-on: ubuntu-latest # O sistema operacional do runner (máquina virtual) onde este job será executado

    steps: # Sequência de passos para este job
      # Passo 1: Clona o código do seu repositório na máquina do runner
      - uses: actions/checkout@v4 # Ação pré-definida do GitHub para clonar o repo

      # Passo 2: Configuração do ambiente Node.js e Yarn
      # A action 'setup-node' geralmente já instala o Yarn.
      # Removendo 'npm install -g yarn' para evitar o erro 'EEXIST'.
      - name: Configurar Node.js e Yarn
        uses: actions/setup-node@v4
        with:
          node-version: 22.x # Ou 'latest' ou a versão específica que você precisa

      # Passo 3: Instalação das dependências do projeto (definidas no seu package.json)
      - name: Instalando dependências
        run: yarn # Executa o comando yarn para instalar as dependências do projeto

      # Passo 4: Checagem de padronização do código (linting)
      # Este passo executa o linter do seu projeto (configurado via 'yarn lint' no package.json)
      - name: Checando padronizacao do código
        run: yarn lint # Comando para rodar o linter

  # Job de testes de unidade
  unidade: # Nome do job
    runs-on: ubuntu-latest # O sistema operacional do runner para este job

    needs: inspecao # Este job só será executado DEPOIS que o job 'inspecao' for concluído com sucesso.

    steps: # Sequência de passos para este job
      # Passo 1: Clona o código do seu repositório
      - uses: actions/checkout@v4 # Ação para clonar o repo

      # Passo 2: Configuração do ambiente Node.js e Yarn
      # Removendo 'npm install -g yarn' para evitar o erro 'EEXIST'.
      - name: Configurar Node.js e Yarn
        uses: actions/setup-node@v4
        with:
          node-version: 22.x # Ou 'latest' ou a versão específica que você precisa

      # Passo 3: Instalação das dependências
      - name: Instalando dependências
        run: yarn

      # Passo 4: Executando Testes de Unidade
      - name: Executando Testes de Unidade
        run: yarn test:unit # OU o comando real para rodar seus testes de unidade, ex: 'npm test'

  # Job de testes E2E (End-to-End)
  e2e-tests: # <--- AGORA ESTÁ NO NÍVEL CORRETO (mesmo nível de 'inspecao' e 'unidade')
    runs-on: ubuntu-latest # O sistema operacional do executor (máquina virtual) onde este job será executado

    needs: unidade # Este job só será executado DEPOIS que o job 'unidade' for concluído com sucesso.
    # Adicionado 'headless: true' para evitar o erro 'Missing X server'.
    # A verificação 'if: ${{ github.event.workflow_run.conclusion == 'success' }}' do seu outro workflow
    # é mais adequada se este workflow for disparado por outro. Como é 'workflow_dispatch' aqui,
    # os 'needs' já garantem a ordem e o sucesso dos jobs anteriores.

    steps: # Sequência de passos para este job
      # Passo: Clona o projeto do seu repositório no executor
      - uses: actions/checkout@v4

      # Passo: Configuração do ambiente Node.js
      - name: Configurar Node.js (para E2E)
        uses: actions/setup-node@v4
        with:
          node-version: 22.x # Define a versão do Node.js a ser utilizada

      # Passo: Instalação das dependências do projeto (definidas no seu package.json)
      - name: Instalando dependências (para E2E)
        run: yarn

      # Passo: Instalação do Playwright e seus navegadores
      - name: Instalando Playwright
        run: yarn playwright install --with-deps # Adicionado '--with-deps' para instalar navegadores

      # Passo: Executar os testes E2E
      - name: Executando Testes E2E
        run: yarn run e2e # Comando para executar os testes end-to-end do seu projeto
        env: # <--- Adicionado para garantir o modo headless se não estiver no playwright.config.js
          PLAYWRIGHT_HEADLESS: 1

  # Job de deploy
  deploy: # <--- AGORA ESTÁ NO NÍVEL CORRETO (mesmo nível de 'inspecao', 'unidade', 'e2e-tests')
    runs-on: ubuntu-latest # O sistema operacional do executor para este job

    needs: e2e-tests # Este job só será executado DEPOIS que o job 'e2e-tests' for concluído com sucesso.

    steps:
      # Exemplo de passos de deploy. Adapte ao seu ambiente (AWS, Azure, Vercel, Netlify, etc.)
      - name: Checkout do Código para Deploy
        uses: actions/checkout@v4

      - name: Exemplo de Passo de Deploy
        run: |
          echo "Simulando deploy da aplicação..."
          # Aqui você colocaria seus comandos de deploy reais, como:
          # npm run build
          # aws s3 sync build/ s3://meu-bucket-de-deploy
          # netlify deploy --prod
          echo "Deploy concluído!"
